#+TITLE: Heartmacs
#+PROPERTY: header-args :results silent :tangle yes :comments both
#+TAGS: keybinding | { os : macos | linux } | GTD

* Package setup
** Package archives
   Set up archives for packages:
   #+BEGIN_SRC emacs-lisp
     (setq package-archives '(("gnu" . "https://elpa.gnu.org./packages/")
			      ("melpa" . "https://melpa.org/packages/")))
   #+END_SRC
** use-package
   Before we do anything else, let's make sure we've got [[https://github.com/jwiegley/use-package][use-package]]
   ready to go! This bit of setup is a modified version of what Greg
   Stein's example from Caches to Caches post [[http://cachestocaches.com/2015/8/getting-started-use-package/][Getting started with
   use-package]]. 
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (setq package-enable-at-startup nil)
     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package)
       (setq use-package-always-ensure t))
   #+END_SRC

* Emacs

** Visual
  These changes relate to how Emacs itself looks, including frames,
  windows, and the like.
*** Frames
    Get rid of tool bars and menu bars:
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
      (tool-bar-mode -1)
    #+END_SRC
*** Windows
    Let's get rid of scroll bars:
    #+BEGIN_SRC emacs-lisp
      (set-scroll-bar-mode nil)
    #+END_SRC
*** Theme
    #+BEGIN_SRC emacs-lisp
      (use-package one-themes
		   :config
		   (load-theme 'one-dark t))
    #+END_SRC
*** Font
    The default font size is a bit small on my monitors, so we'll
    increase it sufficiently.
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 200)
    #+END_SRC
** Misc

*** ido mode
    Inspired by the [[https://www.masteringemacs.org/article/introduction-to-ido-mode][Introduction to ido mode article]] from Mastering
    Emacs, let's enable ido mode everywhere and also enable
    flex-matching.
    #+begin_src emacs-lisp
      (setq ido-enable-flex-matching t
            ido-everywhere t)
      (ido-mode 1)
    #+end_src
 
    We can also use ido-mode for find file at point.
    #+BEGIN_SRC emacs-lisp
      (setq ido-use-filename-at-point 'guess)
    #+END_SRC

    When entering a buffer name that doesn't exist when changing
    buffers, let's let ido-mode create a new buffer.
    #+BEGIN_SRC emacs-lisp
    (setq ido-create-new-buffer 'always)
    #+END_SRC

*** Prompts
    Taking another cue from Mastering Emacs ([[https://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in
    Emacs]]), let's reduce the amount of prompts we come across in
    Emacs:
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq confirm-nonexistent-file-or-buffer nil)
    #+END_SRC

    We can also disable prompts about killing buffers with live
    processes attached.
    #+BEGIN_SRC emacs-lisp
      (setq kill-buffer-query-funcions
	    (remq 'process-kill-buffer-query-function
		  kill-buffer-query-functions))
    #+END_SRC

*** Startup
    Let's get rid of splash screens and startup messages that we don't
    need (also from [[https://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in Emacs]]):
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t
	    inhibit-startup-echo-area-message t)
    #+END_SRC

 
*** recent files (recentf)                                       :keybinding:
    Mickey Petersen suggests using the recent files package in his
    [[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][Find Files Faster with the Recent Files Package]], so we'll copy his
    suggested configuration here.
    
    #+BEGIN_SRC emacs-lisp    
      (require 'recentf)

      (global-set-key (kbd "C-x C-r") 'ido-recentf-open)

      (recentf-mode t)

      (setq recentf-max-saved-items 50)

      (defun ido-recentf-open ()
	"Use `ido-completing-read to \\[find-file] a recent file"
	(interactive)
	(if (find-file (ido-completing-read "Find recent file: " recentf-list))
	    (message "Opening file ...")
	  (message "Aborting")))
    #+END_SRC

*** Quality of life things
    Additionally, let's enable a few things that just makes life
    better in general:
    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode)
    #+END_SRC

    Further, let's enable line numbers everywhere and make them relative.
    #+BEGIN_SRC emacs-lisp    
      (global-display-line-numbers-mode)
      (setq display-line-numbers 'relative)
    #+END_SRC

    Make lines wrap visually if they're longer than what can fit in
    the window.
    #+BEGIN_SRC emacs-lisp
      (visual-line-mode)
    #+END_SRC

    
**** Removing suspend-frame                                      :keybinding:
     To disable suspend-frame (I don't think I've ever meant to
     activate it), we'll instead replace it by a message saying it has
     been unmapped.
     #+BEGIN_SRC emacs-lisp
       (global-set-key [remap suspend-frame]
	 (lambda ()
	   (interactive)
	   (message "This keybinding is disabled (was 'suspend-frame')")))
     #+END_SRC

**** Don't pause redisplay on input events
     According to [[https://www.masteringemacs.org/article/improving-performance-emacs-display-engine][Improving the performance of Emacs's Display Engine?]]
     by Mickey Petersen, Emacs defaults to pausing all display
     redrawing on any input. This may have been useful previously, but
     is not necessary anymore.
     #+BEGIN_SRC emacs-lisp
       (setq redisplay-dont-pause t)
     #+END_SRC
*** Garbage collection
    Inspired by the [[https://github.com/lewang/flx][flx's readme]], we can increase the GC threshold
    significantly from the default. In addition to when using flx,
    this might also come in handy in other situations.
    #+BEGIN_SRC emacs-lisp
      (setq gc-cons-threshold 20000000) 
    #+END_SRC
* Ivy

* Flycheck
  #+BEGIN_SRC emacs-lisp  
    (use-package flycheck
      :ensure t
      :config (global-flycheck-mode))
  #+END_SRC

* TODO Company                                                   :keybinding:
  Completion is important! [[https://github.com/company-mode/company-mode][Company-mode repo]]

  We need to set this up properly. In addition to wanting to use
  tab-n-go, I also want to be able to use TAB to expand completions
  with function arguments (like Rust Analyzer). Furthermore, I also
  want to find a key combination that will always trigger
  ~company-complete~. (C-f5?)

  
  And! the completion selection should wrap around when it reaches the
  end of the list (or the start when searching backwards)

  In addition to the basic company-mode configuration, I also use
  [[https://github.com/company-mode/company-mode/blob/master/company-tng.el][company-tng]] to get YCMD-like behavior.  This requires a little extra
  bit of configuration to get set up.

  #+BEGIN_SRC emacs-lisp
    (defun my-company-tng-setup ()
      (setq company-require-match nil
	    company-frontends '(company-tng-frontend
				company-pseudo-tooltip-frontend
				company-echo-metadata-frontend))
      (let ((keymap company-active-map))
	(define-key keymap [return] nil)
	(define-key keymap (kbd "RET") nil)))
    (use-package company
      :config
      (global-company-mode)
      (global-set-key (kbd "C-<f5>") 'company-complete)
      (my-company-tng-setup)
      (setq company-idle-delay 0.2))
  #+END_SRC

  When using varying font sizes within a buffer, this can make the
  company completion dropdown misaligned (with itself, even). Using
  the [[https://github.com/tumashu/company-posframe][company-posframe package]] appears to fix this by putting
  completions in a separate frame.
  #+BEGIN_SRC emacs-lisp
    (use-package company-posframe
      :after company
      :config (company-posframe-mode 1))
  #+END_SRC
* Magit

* Rainbow delimiters
  Rainbow delimiters make it much easier to read a lot of code, so
  let's set them up.
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :hook ((prog-mode text-mode) . rainbow-delimiters-mode))
  #+END_SRC

* Direnv mode

* LSP

* Nix mode

* Rust mode
